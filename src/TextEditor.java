
import com.ozten.font.JFontChooser;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.undo.UndoManager;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Dell
 */
public class TextEditor extends javax.swing.JFrame {

    /**
     * Creates new form TextEditor
     */
    File fileSelected;
    UndoManager undoManager = new UndoManager();

    public TextEditor() {
        initComponents();
        this.setLocationRelativeTo(null);
        getDataFromJTextArea();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtContent = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuNew = new javax.swing.JMenuItem();
        mnuOpen = new javax.swing.JMenuItem();
        mnuSave = new javax.swing.JMenuItem();
        mnuSaveAs = new javax.swing.JMenuItem();
        mnuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mnuSelectAll = new javax.swing.JMenuItem();
        mnuCut = new javax.swing.JMenuItem();
        mnuCopy = new javax.swing.JMenuItem();
        mnuPaste = new javax.swing.JMenuItem();
        mnuUndo = new javax.swing.JMenuItem();
        mnuRedo = new javax.swing.JMenuItem();
        mnuFind = new javax.swing.JMenuItem();
        mnuReplace = new javax.swing.JMenuItem();
        mnuChangeFont = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Untitled");

        txtContent.setColumns(20);
        txtContent.setRows(5);
        jScrollPane1.setViewportView(txtContent);

        jMenu1.setText("File");

        mnuNew.setText("New");
        mnuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuNewActionPerformed(evt);
            }
        });
        jMenu1.add(mnuNew);

        mnuOpen.setText("Open");
        mnuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOpenActionPerformed(evt);
            }
        });
        jMenu1.add(mnuOpen);

        mnuSave.setText("Save");
        mnuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveActionPerformed(evt);
            }
        });
        jMenu1.add(mnuSave);

        mnuSaveAs.setText("Save As");
        mnuSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(mnuSaveAs);

        mnuExit.setText("Exit");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExitActionPerformed(evt);
            }
        });
        jMenu1.add(mnuExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        mnuSelectAll.setText("Select All");
        mnuSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSelectAllActionPerformed(evt);
            }
        });
        jMenu2.add(mnuSelectAll);

        mnuCut.setText("Cut");
        mnuCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCutActionPerformed(evt);
            }
        });
        jMenu2.add(mnuCut);

        mnuCopy.setText("Copy");
        mnuCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCopyActionPerformed(evt);
            }
        });
        jMenu2.add(mnuCopy);

        mnuPaste.setText("Paste");
        mnuPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPasteActionPerformed(evt);
            }
        });
        jMenu2.add(mnuPaste);

        mnuUndo.setText("Undo");
        mnuUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuUndoActionPerformed(evt);
            }
        });
        jMenu2.add(mnuUndo);

        mnuRedo.setText("Redo");
        mnuRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRedoActionPerformed(evt);
            }
        });
        jMenu2.add(mnuRedo);

        mnuFind.setText("Find");
        mnuFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFindActionPerformed(evt);
            }
        });
        jMenu2.add(mnuFind);

        mnuReplace.setText("Replace");
        mnuReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuReplaceActionPerformed(evt);
            }
        });
        jMenu2.add(mnuReplace);

        mnuChangeFont.setText("Change Font");
        mnuChangeFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuChangeFontActionPerformed(evt);
            }
        });
        jMenu2.add(mnuChangeFont);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNewActionPerformed
        try {
            JFileChooser fileChooser = new JFileChooser();
            FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
            fileChooser.setFileFilter(fileFilter);
            String content = txtContent.getText();
            if (content.length() == 0) {
                txtContent.setText("");
            } else {
                int val = JOptionPane.showConfirmDialog(this, "Save data?", "Save?", JOptionPane.YES_NO_OPTION);
                if (val == JOptionPane.YES_OPTION) {
                    if (fileSelected == null) {
                        int value = fileChooser.showSaveDialog(null);
                        if (value == JFileChooser.OPEN_DIALOG) {
                            fileSelected = fileChooser.getSelectedFile();
                            FileWriter fw = new FileWriter(fileSelected);
                            BufferedWriter bw = new BufferedWriter(fw);
                            bw.write(txtContent.getText());
                            this.setTitle(fileSelected.getName());
                            JOptionPane.showMessageDialog(null, "Save success");
                            bw.close();
                            fw.close();
                        }
                    } else {
                        FileWriter fw = new FileWriter(fileSelected);
                        BufferedWriter bw = new BufferedWriter(fw);
                        bw.write(txtContent.getText());
                        JOptionPane.showMessageDialog(null, "Save success");
                        bw.close();
                        fw.close();
                    }
                }
                if (val == JOptionPane.NO_OPTION) {
                    txtContent.setText("");
                    this.setTitle("Untitled");
                }
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_mnuNewActionPerformed

    private void mnuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOpenActionPerformed
        try {
            JFileChooser fileChooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
            fileChooser.setFileFilter(filter);
            int value = fileChooser.showOpenDialog(null);
            if (value == JFileChooser.OPEN_DIALOG) {
                fileSelected = fileChooser.getSelectedFile();
                FileReader fr = new FileReader(fileSelected);
                BufferedReader br = new BufferedReader(fr);
                String line = "";
                while (br.ready()) {
                    line += br.readLine() + "\n";
                }
                txtContent.setText(line);
                this.setTitle(fileSelected.getName());
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_mnuOpenActionPerformed

    private void mnuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveActionPerformed
        try {
            JFileChooser fileChooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
            fileChooser.setFileFilter(filter);
            if (fileSelected != null) {
                FileWriter fw = new FileWriter(fileSelected);
                BufferedWriter bw = new BufferedWriter(fw);
                bw.write(txtContent.getText());
                this.setTitle(fileSelected.getName());
                bw.close();
                fw.close();
            } else {
                int value = fileChooser.showSaveDialog(null);
                if (value == JFileChooser.OPEN_DIALOG) {
                    fileSelected = fileChooser.getSelectedFile();
                    FileWriter fw = new FileWriter(fileSelected);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(txtContent.getText());
                    this.setTitle(fileSelected.getName());
                    JOptionPane.showMessageDialog(null, "Save success");
                    bw.close();
                    fw.close();
                }
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_mnuSaveActionPerformed

    private void mnuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExitActionPerformed
        try {
            JFileChooser fileChooser = new JFileChooser();
            FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
            fileChooser.setFileFilter(fileFilter);
            String content = txtContent.getText();
            if (content.length() == 0) {
                this.dispose();
            } else {
                int val = JOptionPane.showConfirmDialog(this, "Save data?", "Save?", JOptionPane.YES_NO_OPTION);
                if (val == JOptionPane.YES_OPTION) {
                    if (fileSelected == null) {
                        int value = fileChooser.showSaveDialog(null);
                        if (value == JFileChooser.OPEN_DIALOG) {
                            fileSelected = fileChooser.getSelectedFile();
                            FileWriter fw = new FileWriter(fileSelected);
                            BufferedWriter bw = new BufferedWriter(fw);
                            bw.write(txtContent.getText());                           
                            JOptionPane.showMessageDialog(null, "Save success");
                            bw.close();
                            fw.close();
                            this.dispose();
                        }
                    } else {
                        FileWriter fw = new FileWriter(fileSelected);
                        BufferedWriter bw = new BufferedWriter(fw);
                        bw.write(txtContent.getText());
                        JOptionPane.showMessageDialog(null, "Save success");
                        bw.close();
                        fw.close();
                        this.dispose();
                    }
                }
                if (val == JOptionPane.NO_OPTION) {
                    this.dispose();
                }
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_mnuExitActionPerformed

    private void mnuSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveAsActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        fileChooser.setFileFilter(filter);
        try {
            int value = fileChooser.showSaveDialog(null);
            if (value == JFileChooser.OPEN_DIALOG) {
                fileSelected = fileChooser.getSelectedFile();
                FileWriter fw = new FileWriter(fileSelected);
                BufferedWriter bw = new BufferedWriter(fw);
                bw.write(txtContent.getText());
                this.setTitle(fileSelected.getName());
                JOptionPane.showMessageDialog(null, "Save success");
                bw.close();
                fw.close();
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_mnuSaveAsActionPerformed

    private void mnuSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSelectAllActionPerformed
        txtContent.selectAll();
    }//GEN-LAST:event_mnuSelectAllActionPerformed

    private void mnuCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCutActionPerformed
        txtContent.cut();
    }//GEN-LAST:event_mnuCutActionPerformed

    private void mnuPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPasteActionPerformed
        txtContent.paste();
    }//GEN-LAST:event_mnuPasteActionPerformed

    private void mnuCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCopyActionPerformed
        txtContent.copy();
    }//GEN-LAST:event_mnuCopyActionPerformed

    void getDataFromJTextArea() {
        txtContent.getDocument().addUndoableEditListener(new UndoableEditListener() {
            @Override
            public void undoableEditHappened(UndoableEditEvent e) {
                undoManager.addEdit(e.getEdit());
            }
        });
    }

    private void mnuUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuUndoActionPerformed
        if (undoManager.canUndo()) {
            undoManager.undo();
        }
    }//GEN-LAST:event_mnuUndoActionPerformed

    private void mnuRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRedoActionPerformed
        if (undoManager.canRedo()) {
            undoManager.redo();
        }
    }//GEN-LAST:event_mnuRedoActionPerformed

    private void mnuFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFindActionPerformed
        FindAndReplace find = new FindAndReplace(this, true);
        find.setVisible(true);
    }//GEN-LAST:event_mnuFindActionPerformed

    private void mnuReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuReplaceActionPerformed
        FindAndReplace replace = new FindAndReplace(this, true);
        replace.setVisible(true);
    }//GEN-LAST:event_mnuReplaceActionPerformed

    private void mnuChangeFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuChangeFontActionPerformed
        JFontChooser fontChooser = new JFontChooser();
        Font f = fontChooser.showDialog(this);
        txtContent.setFont(f);
    }//GEN-LAST:event_mnuChangeFontActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextEditor.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mnuChangeFont;
    private javax.swing.JMenuItem mnuCopy;
    private javax.swing.JMenuItem mnuCut;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenuItem mnuFind;
    private javax.swing.JMenuItem mnuNew;
    private javax.swing.JMenuItem mnuOpen;
    private javax.swing.JMenuItem mnuPaste;
    private javax.swing.JMenuItem mnuRedo;
    private javax.swing.JMenuItem mnuReplace;
    private javax.swing.JMenuItem mnuSave;
    private javax.swing.JMenuItem mnuSaveAs;
    private javax.swing.JMenuItem mnuSelectAll;
    private javax.swing.JMenuItem mnuUndo;
    public javax.swing.JTextArea txtContent;
    // End of variables declaration//GEN-END:variables
}
